import jsPDF from 'jspdf';
import { format, parseISO } from 'date-fns';
import type { Invigilator, Assignment } from '@/types';

// This function creates the HTML content for the PDF in a structured way.
const createPdfHtml = (
    invigilator: Invigilator, 
    duties: (Assignment & { day: string })[],
    collegeName: string,
    examTitle: string
) => {
  const dutiesHtml = duties.map((duty, index) => `
    <tr>
      <td style="text-align: center; padding: 8px; border: 1px solid #ddd;">${index + 1}</td>
      <td style="text-align: center; padding: 8px; border: 1px solid #ddd;">${format(parseISO(duty.date), 'dd.MM.yyyy')}</td>
      <td style="padding: 8px; border: 1px solid #ddd;">${duty.day}</td>
      <td style="padding: 8px; border: 1px solid #ddd;">${duty.subject}</td>
      <td style="text-align: center; padding: 8px; border: 1px solid #ddd;">${duty.time}</td>
    </tr>
  `).join('');

  return `
    <div style="font-family: Arial, sans-serif; color: #333; margin: 20px; border: 1px solid #eee; box-shadow: 0 0 10px rgba(0,0,0,0.1); font-size: 12px;">
      <div style="background-color: #000080; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 20px;">${collegeName || 'College Name'}</h1>
        <p style="margin: 5px 0 0; font-size: 16px;">${examTitle || 'Examination Name'}</p>
        <p style="margin: 5px 0 0; font-size: 14px; font-weight: bold;">Invigilator's Duty Summary</p>
      </div>
      <div style="padding: 20px;">
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px; font-size: 11px;">
          <tr>
            <td style="padding: 4px 0;"><strong>Name:</strong> ${invigilator.name}</td>
            <td style="padding: 4px 0;"><strong>Designation:</strong> ${invigilator.designation}</td>
            <td></td>
          </tr>
          <tr>
            <td style="padding: 4px 0;"><strong>Mobile No:</strong> ${invigilator.mobileNo}</td>
            <td style="padding: 4px 0;"><strong>E-Mail ID:</strong> ${invigilator.email}</td>
            <td style="padding: 4px 0; text-align: right;"><strong>No of Duties Allotted:</strong> ${duties.length.toString().padStart(2, '0')}</td>
          </tr>
        </table>
        <table style="width: 100%; border-collapse: collapse; font-size: 11px;">
          <thead style="background-color: #f2f2f2;">
            <tr>
              <th style="width: 10%; text-align: center; padding: 8px; border: 1px solid #ddd;">Sl.No</th>
              <th style="width: 20%; text-align: center; padding: 8px; border: 1px solid #ddd;">Date</th>
              <th style="width: 20%; padding: 8px; border: 1px solid #ddd;">Day</th>
              <th style="width: 30%; padding: 8px; border: 1px solid #ddd;">Subject</th>
              <th style="width: 20%; text-align: center; padding: 8px; border: 1px solid #ddd;">Timings</th>
            </tr>
          </thead>
          <tbody>
            ${dutiesHtml}
          </tbody>
        </table>
      </div>
      <div style="text-align: right; padding: 10px 20px; font-size: 9px; color: #aaa;">
        Generated by DutyFlow
      </div>
    </div>
  `;
};

// The main exported function that generates the PDF and returns a Base64 string.
export const generateInvigilatorPdf = async (
    invigilator: Invigilator, 
    duties: (Assignment & { day: string })[],
    collegeName: string,
    examTitle: string
): Promise<string | null> => {
  try {
    const doc = new jsPDF('p', 'mm', 'a4');
    const htmlContent = createPdfHtml(invigilator, duties, collegeName, examTitle);
    
    await doc.html(htmlContent, {
      callback: function (doc) {
        // This callback is called after the HTML is rendered.
        // We don't save here, but let the outer scope handle the output.
      },
      x: 0,
      y: 0,
      width: 210, // A4 width in mm
      windowWidth: 800, // A virtual window width to control rendering
    });

    return doc.output('datauristring').split(',')[1];
  } catch (error) {
    console.error("Error generating PDF:", error);
    return null;
  }
};
